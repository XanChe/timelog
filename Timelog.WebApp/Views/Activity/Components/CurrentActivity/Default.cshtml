@model ActivityViewModel

<div>
    <h4>Активное действие</h4>
    <hr />
    <span id="timerLabel" runat="server"></span>

<script type="text/javascript">

    const WHEN_NEED_BAR_CHANGE_RATIO = 0.8;
    const BAR_CHANGE_RATIO = @ViewBag.BarChangeRatio;
    const ONE_HOUR_IN_SECONDS = 3600;
    const ONE_MINUTE_IN_SECONDS = 60;
    
    let timeLimits = [14400, 10800, 7200, 3600, 1800, 1200, 600, 300];

    function getTimeFromSeconds(timeInSeconds){
        var seconds = timeInSeconds;
        var hours = Math.floor(seconds / ONE_HOUR_IN_SECONDS);
        seconds = seconds % ONE_HOUR_IN_SECONDS;
        var minutes = Math.floor(seconds / ONE_MINUTE_IN_SECONDS);
        
        var result = '';
        if (hours > 0) {
            result = result + hours + '&nbspчас&nbsp'
        }
        if (minutes > 0) {
            result = result + minutes + '&nbspмин.'
        }
        return result;

    }

    function getNewMaxValue(maxValue, currValue){
        
        if (timeLimits.length > 0) {
            newMaxValue = timeLimits.pop();
        }
        console.log(currValue + ' | ' + maxValue + ' | ' + newMaxValue)
        while (timeLimits.length > 0 && newMaxValue * WHEN_NEED_BAR_CHANGE_RATIO <= currValue) {
            newMaxValue = timeLimits.pop();           
            console.log(currValue + ' | ' + maxValue + ' [|] ' + newMaxValue)
        }
        console.log(currValue + ' | ' + maxValue + ' | ' + newMaxValue)
        if (newMaxValue  > maxValue) {
                return newMaxValue;
        } else {
            return Math.max(maxValue, currValue) * BAR_CHANGE_RATIO;
        }
    }
    
    function countdown() 
    {
        var maxValueInSeconds =  parseInt(document.getElementById("max-duration").value); 
        var totalSeconds = parseInt(document.getElementById("curr-duration").value) + 1;
        console.log(totalSeconds + ' | ' + maxValueInSeconds)
        if (totalSeconds >= maxValueInSeconds * WHEN_NEED_BAR_CHANGE_RATIO) {
             
            maxValueInSeconds = getNewMaxValue(maxValueInSeconds, totalSeconds);
                        
            document.getElementById("max-duration").value = maxValueInSeconds;
        }

        var barWide = Math.floor((totalSeconds / maxValueInSeconds) * 100);        

        
        var seconds = totalSeconds;
        var hours = Math.floor(seconds / ONE_HOUR_IN_SECONDS);
        seconds = seconds % ONE_HOUR_IN_SECONDS;
        var minutes = Math.floor(seconds / ONE_MINUTE_IN_SECONDS);
        seconds = seconds % ONE_MINUTE_IN_SECONDS;        

        document.getElementById("curr-duration").value = totalSeconds;
        document.getElementById("time-progress-bar").style.width = barWide + "%";
        document.getElementById("time-progress-bar-content").innerHTML = '&nbsp;' + String(hours).padStart(2, '0') + ':' + String(minutes).padStart(2, '0') + ':' + String(seconds).padStart(2, '0');
        document.getElementById("time-progress-bar-max-val").innerHTML = getTimeFromSeconds(maxValueInSeconds);
        setTimeout("countdown()", 1000);
        
    }

    setTimeout("countdown()", 1000);

</script>
    

<div class="container">
  <div class="row">
    <div class="col-sm-2">      
      <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" >Остановить</button>
    </div>
    
    <div class="col-sm-8">             
      <div class="row">
        <div class="col-sm-2">
           Старт в @Model.StartTime.ToString("HH:mm")              
        </div>
        <div class="col-sm-9">
            <div class="progress blue">
                <div id="time-progress-bar" class="progress-bar" role="progressbar" style="width: @((int)(Model.Duration.TotalSeconds / 300) )%; background:#1a4966;" >
                       
                </div>
                <div id="time-progress-bar-content" class="progress-value fw-bolder">@Html.DisplayFor(model => model.Duration)</div>
            </div>
            
        </div>
        <div id="time-progress-bar-max-val" class="col-12 col-sm-1"></div>
      </div>
      <div class="row">
           
          <div class="col-8 col-sm-6">
          @Html.DisplayFor(model => model.ProjectName)
        </div>
        <div class="col-4 col-sm-4">
          @Html.DisplayFor(model => model.ActivityTypeName)
        </div>
      </div>
    </div>
  </div>
</div>




<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Остановить действие</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
    @using(Html.BeginForm("Stop", "Activity", FormMethod.Post))
    {
        <input type="hidden" id="max-duration" value="@ViewBag.CurrTimeLimit">
        @Html.Hidden("curr-duration", (int)Model.Duration.TotalSeconds)
        
      <div class="modal-body">
                 
          <div class="mb-3">
            <label for="message-text" class="col-form-label">Комметарий:</label>
            <textarea class="form-control" id="comment" name="comment"></textarea>            
          </div>
        
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
        <button type="submit" class="btn btn-primary">Стоп</button>
      </div>
      
   
    }
    </div>
  </div>
</div>
    

    
